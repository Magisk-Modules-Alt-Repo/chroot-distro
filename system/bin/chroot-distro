#!/system/bin/sh
#Credit : @YasserNull

chroot_distro_path="/data/local/chroot-distro"

if [ "$(whoami)" != "root" ]; then
    echo "Root access required."
    exit 1
fi

if ! command -v busybox &> /dev/null; then
    echo "busybox not found, install busybox for Android NDK and try again"
    exit 1
fi

if [ ! -d "$chroot_distro_path/" ]; then
    mkdir -p $chroot_distro_path/
fi

if [ ! -d "$chroot_distro_path/.rootfs/" ]; then
    mkdir -p $chroot_distro_path/.rootfs/
fi
if [ ! -d "$chroot_distro_path/.backup/" ]; then
    mkdir -p $chroot_distro_path/.backup/
fi

 if [ "$(uname -m)" = "aarch64" ] || [ "$(uname -m)" = "arm64" ]; then
    hardware_machine="arm64"
elif [ "$(uname -m)" = "arm" ] || [ "$(uname -m)" = "armel" ] || [ "$(uname -m)" = "armhf" ] || [ "$(uname -m)" = "armhfp" ] || [ "$(uname -m)" = "armv7" ] || [ "$(uname -m)" = "armv7l" ] || [ "$(uname -m)" = "armv7a" ] || [ "$(uname -m)" = "armv8l" ]; then
    hardware_machine="armhf"
elif [ "$(uname -m)" = "386" ] || [ "$(uname -m)" = "i386" ] || [ "$(uname -m)" = "i686" ] || [ "$(uname -m)" = "x86" ]; then
    hardware_machine="i386"
elif [ "$(uname -m)" = "amd64" ] || [ "$(uname -m)" = "x86_64" ]; then
    hardware_machine="amd64"
else
    echo "Unsupported machine hardware: $(uname -m)"
    exit 1
fi



chroot_distro_help() {
    echo "chroot-distro : install linux distributions

usage :

chroot-distro help - for more information
chroot-distro list - list of available linux distributions

chroot-distro download <distro> - download rootfs
chroot-distro redownload <distro> - redownload rootfs
chroot-distro delete <distro> - delete rootfs

chroot-distro install <distro> - install distro
chroot-distro reinstall <distro> - reinstall distro
chroot-distro uninstall <distro> - uninstall distro

chroot-distro backup <distro> - backup distro
chroot-distro backup <distro> <path> - backup distro with custom path
chroot-distro unbackup <distro> - delete backup

chroot-distro restore <distro> - restore distro
chroot-distro restore <distro> <path> - restore distro with custom path

chroot-distro command <distro> <command> - run command
chroot-distro login <distro> - login to distro
"
}

chroot_distro_list_item() {
    if [ -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
        echo "Downloaded : Yes"
    else
        echo "Downloaded : No"
    fi
    if [ -d "$chroot_distro_path/$1/" ]; then
        echo "Installed: Yes"
    else
        echo "Installed: No"
    fi
    if [ -f "$chroot_distro_path/.backup/$1.tar.xz" ]; then
        echo "Backup : Yes\n"
    else
        echo "Backup : No\n"
    fi
}

chroot_distro_list() {
    echo "Ubuntu : ubuntu
Rootfs : https://cdimage.ubuntu.com/ubuntu-base/releases/"
    chroot_distro_list_item ubuntu
    echo "Kali Linux : kali
Rootfs : http://kali.download/nethunter-images/"
    chroot_distro_list_item kali
    echo "Debian : debian
Rootfs : https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/Debian/
Rootfs : https://github.com/termux/proot-distro/releases/download/v4.7.0/"
    chroot_distro_list_item debian
    echo "Parrot OS : parrot
Rootfs : https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/Parrot/"
    chroot_distro_list_item parrot
    echo "Alpine : alpine
Rootfs : http://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/"
    chroot_distro_list_item alpine
    echo "Void Linux : void
Rootfs : https://repo-default.voidlinux.org/live/"
    chroot_distro_list_item void
    if [ "$hardware_machine" != "i386" ]; then
        echo "Arch Linux : archlinux
Rootfs : http://ca.us.mirror.archlinuxarm.org/os/
Rootfs : https://mirrors.ocf.berkeley.edu/archlinux/iso/latest/"
        chroot_distro_list_item archlinux
    fi
    if [ "$hardware_machine" = "arm64" ]; then
        echo "Artix Linux : artix
Rootfs : https://github.com/termux/proot-distro/releases/download/v4.6.0/"
        chroot_distro_list_item artix
    fi
    if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "amd64" ]; then
        echo "Deepin : deepin
Rootfs : https://github.com/termux/proot-distro/releases/download/v4.6.0/"
        chroot_distro_list_item deepin
    fi
    if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "amd64" ]; then
        echo "Fedora : fedora
Rootfs : https://github.com/termux/proot-distro/releases/download/v4.6.0/"
        chroot_distro_list_item fedora
    fi
    if [ "$hardware_machine" = "arm64" ]; then
        echo "Manjaro : manjaro
Rootfs : https://github.com/termux/proot-distro/releases/download/v4.6.0/"
        chroot_distro_list_item manjaro
    fi
    if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "amd64" ]; then
        echo "OpenKylin : openkylin
Rootfs : https://github.com/termux/proot-distro/releases/download/v4.6.0/"
        chroot_distro_list_item openkylin
    fi
    if [ "$hardware_machine" != "armhf" ]; then
        echo "Pardus : pardus
Rootfs : https://github.com/termux/proot-distro/releases/download/v4.6.0/"
        chroot_distro_list_item pardus
    fi
    echo "OpenSuse : opensuse
Rootfs : https://github.com/termux/proot-distro/releases/download/v4.6.0/"
    chroot_distro_list_item opensuse
    echo "BackBox : backbox
Rootfs : https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/BackBox/"
    chroot_distro_list_item backbox
    if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "amd64" ]; then
        echo "CentOS : centos
Rootfs : https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS/"
        chroot_distro_list_item centos
    fi
    if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "amd64" ]; then
        echo "CentOS Stream : centos_stream
Rootfs : https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS_Stream/"
        chroot_distro_list_item centos_stream
    fi
}

chroot_distro_download() {
    if [ "$1" = "ubuntu" ]; then
        if [ "$hardware_machine" = "i386" ] || [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "armhf" ] || [ "$hardware_machine" = "amd64" ]; then
            echo "[1] ubuntu bionic 18.04.5"
        fi
        if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "armhf" ] || [ "$hardware_machine" = "amd64" ]; then
            echo "[2] ubuntu focal 20.04.5"
        fi
        if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "armhf" ] || [ "$hardware_machine" = "amd64" ]; then
            echo "[3] ubuntu jammy 22.04.4"
        fi
        if [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "armhf" ] || [ "$hardware_machine" = "amd64" ]; then
            echo "[4] ubuntu mantic 23.10"
        fi
        if [ "$hardware_machine" = "i386" ] || [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "armhf" ] || [ "$hardware_machine" = "amd64" ]; then
            echo "[5] ubuntu trusty 14.04.6"
        fi
        if [ "$hardware_machine" = "i386" ] || [ "$hardware_machine" = "arm64" ] || [ "$hardware_machine" = "armhf" ] || [ "$hardware_machine" = "amd64" ]; then
            echo "[6] ubuntu xenial 16.04.6"
        fi
        while true; do
            printf "Enter a number : "
            read number
            case "$number" in
                1) rootfs="bionic";rootfs_version="18.04.5"; break;;
                2) rootfs="focal";rootfs_version="20.04.5"; break;;
                3) rootfs="jammy";rootfs_version="22.04.4"; break;;
                4) rootfs="mantic";rootfs_version="23.10"; break;;
                5) rootfs="trusty";rootfs_version="14.04.6"; break;;
                6) rootfs="xenial";rootfs_version="16.04.6"; break;;
                *) echo "Unknown option : $number";;
            esac
        done
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://cdimage.ubuntu.com/ubuntu-base/releases/$rootfs/release/ubuntu-base-$rootfs_version-base-$hardware_machine.tar.gz"
            if [ $? -ne 0 ]; then
                echo "Failed to download the Ubuntu Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "alpine" ]; then
        echo "[1] alpine minirootfs 3.19.0"
        echo "[2] alpine netboot 3.19.0"
        echo "[3] alpine rpi 3.19.0"
        echo "[4] alpine uboot 3.19.0"
        while true; do
            printf "Enter a number : "
            read number
            case "$number" in
                1) rootfs="minirootfs";break;;
                2) rootfs="netboot"; break;;
                3) rootfs="rpi"; break;;
                4) rootfs="uboot";break;;
                *) echo "Unknown option : $number";;
            esac
        done
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "http://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/x86/g)/alpine-$rootfs-3.19.0-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/x86/g).tar.gz"
            if [ $? -ne 0 ]; then
                echo "Failed to download the Alpine Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "kali" ]; then
        echo "[1] kali linux full 2024.1"
        echo "[2] kali linux minimal 2024.1"
        echo "[3] kali linux nano 2024.1"
        echo "[4] kali linux full 2023.4"
        echo "[5] kali linux minimal 2023.4"
        echo "[6] kali linux nano 2023.4"
        echo "[7] kali linux full 2023.3b"
        echo "[8] kali linux minimal 2023.3b"
        echo "[9] kali linux nano 2023.3b"
        echo "[10] kali linux full 2023.3"
        echo "[11] kali linux minimal 2023.3"
        echo "[12] kali linux nano 2023.3"
        echo "[13] kali linux full current"
        echo "[14] kali linux minimal current"
        echo "[15] kali linux nano current"
        while true; do
            printf "Enter a number : "
            read number
            case "$number" in
                1) rootfs="full";rootfs_version="kali-2024.1"; break;;
                2) rootfs="minimal";rootfs_version="kali-2024.1"; break;;
                3) rootfs="nano";rootfs_version="kali-2024.1"; break;;
                4) rootfs="full";rootfs_version="kali-2023.4"; break;;
                5) rootfs="minimal";rootfs_version="kali-2023.4"; break;;
                6) rootfs="nano";rootfs_version="kali-2023.4"; break;;
                7) rootfs="full";rootfs_version="kali-2023.3b"; break;;
                8) rootfs="minimal";rootfs_version="kali-2023.3b"; break;;
                9) rootfs="nano";rootfs_version="kali-2023.3b"; break;;
                10) rootfs="full";rootfs_version="kali-2023.3"; break;;
                11) rootfs="minimal";rootfs_version="kali-2023.3"; break;;
                12) rootfs="nano";rootfs_version="kali-2023.3"; break;;
                13) rootfs="full";rootfs_version="current"; break;;
                14) rootfs="minimal";rootfs_version="current"; break;;
                15) rootfs="nano";rootfs_version="current"; break;;
                *) echo "Unknown option : $number";;
            esac
        done
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "http://kali.download/nethunter-images/$rootfs_version/rootfs/kalifs-$hardware_machine-$rootfs.tar.xz"
            if [ $? -ne 0 ]; then
                echo "Failed to download the Kali Linux Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "debian" ]; then
        echo "[1] Debian"
        echo "[2] Debian bullseye"
        echo "[3] Debian bookworm"
        while true; do
            printf "Enter a number : "
            read number
            case "$number" in
                1) rootfs="debian"; break;;
                2) rootfs="debian_bullseye"; break;;
                3) rootfs="debian_bookworm";break;;
                *) echo "Unknown option : $number";;
            esac
        done

        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ $rootfs = "debian" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/Debian/$hardware_machine/debian-rootfs-$hardware_machine.tar.xz"
            elif [ $rootfs = "debian_bullseye" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.7.0/debian-bullseye-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/arm/g)-pd-v4.7.0.tar.xz"
            elif [ $rootfs = "debian_bookworm" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.7.0/debian-bookworm-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/arm/g)-pd-v4.7.0.tar.xz"
            fi

            if [ $? -ne 0 ]; then
                echo "Failed to download the Debian Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "parrot" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/Parrot/$hardware_machine/parrot-rootfs-$hardware_machine.tar.xz"
            if [ $? -ne 0 ]; then
                echo "Failed to download the Parrot OS Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "archlinux" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ "$hardware_machine" = "armhf" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "http://ca.us.mirror.archlinuxarm.org/os/ArchLinuxARM-armv7-latest.tar.gz"
            elif [ "$hardware_machine" = "arm64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "http://ca.us.mirror.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz"
            elif [ "$hardware_machine" = "amd64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://mirrors.ocf.berkeley.edu/archlinux/iso/latest/archlinux-bootstrap-x86_64.tar.gz"
            else
                echo "Unsupported machine hardware: $(uname -m)"
                exit
            fi
            if [ $? -ne 0 ]; then
                echo "Failed to download the Arch Linux Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "artix" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ "$hardware_machine" = "arm64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/artix-aarch64-pd-v4.6.0.tar.xz"
            else
                echo "Unsupported machine hardware: $(uname -m)"
                exit
            fi
            if [ $? -ne 0 ]; then
                echo "Failed to download the Artix Linux Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "deepin" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ "$hardware_machine" = "arm64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/artix-aarch64-pd-v4.6.0.tar.xz"
            elif [ "$hardware_machine" = "amd64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/artix-x86_64-pd-v4.6.0.tar.xz"
            else
                echo "Unsupported machine hardware: $(uname -m)"
                exit
            fi
            if [ $? -ne 0 ]; then
                echo "Failed to download the Deepin Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "fedora" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ "$hardware_machine" = "arm64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/fedora-aarch64-pd-v4.6.0.tar.xz"
            elif [ "$hardware_machine" = "amd64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/fedora-x86_64-pd-v4.6.0.tar.xz"
            else
                echo "Unsupported machine hardware: $(uname -m)"
                exit
            fi
            if [ $? -ne 0 ]; then
                echo "Failed to download the Fedora Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "openkylin" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ "$hardware_machine" = "arm64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/openkylin-aarch64-pd-v4.6.0.tar.xz"
            elif [ "$hardware_machine" = "amd64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/openkylin-x86_64-pd-v4.6.0.tar.xz"
            else
                echo "Unsupported machine hardware: $(uname -m)"
                exit
            fi
            if [ $? -ne 0 ]; then
                echo "Failed to download the OpenKylin Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "manjaro" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ "$hardware_machine" = "arm64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/manjaro-aarch64-pd-v4.6.0.tar.xz"
            else
                echo "Unsupported machine hardware: $(uname -m)"
                exit
            fi
            if [ $? -ne 0 ]; then
                echo "Failed to download the Manjaro Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "opensuse" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/opensuse-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/arm/g)-pd-v4.6.0.tar.xz"
            if [ $? -ne 0 ]; then
                echo "Failed to download the OpenSuse Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "pardus" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ "$hardware_machine" != "armhf" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/termux/proot-distro/releases/download/v4.6.0/pardus-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/arm/g)-pd-v4.6.0.tar.xz"
            else
                echo "Unsupported machine hardware: $(uname -m)"
                exit
            fi
            if [ $? -ne 0 ]; then
                echo "Failed to download the Pardus Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "backbox" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/BackBox/$hardware_machine/backbox-rootfs-$hardware_machine.tar.xz"
            if [ $? -ne 0 ]; then
                echo "Failed to download the BackBox Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "centos" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ "$hardware_machine" = "arm64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS/arm64/centos-rootfs-arm64.tar.xz"
            elif [ "$hardware_machine" = "amd64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS/amd64/centos-rootfs-amd64.tar.xz"
            else
                echo "Unsupported machine hardware: $(uname -m)"
                exit
            fi
            if [ $? -ne 0 ]; then
                echo "Failed to download the CentOS Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "centos_stream" ]; then
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ "$hardware_machine" = "arm64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS_Stream/arm64/centos_stream-rootfs-arm64.tar.xz"
            elif [ "$hardware_machine" = "amd64" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://github.com/EXALAB/Anlinux-Resources/raw/master/Rootfs/CentOS_Stream/amd64/centos_stream-rootfs-amd64.tar.xz"
            else
                echo "Unsupported machine hardware: $(uname -m)"
                exit
            fi
            if [ $? -ne 0 ]; then
                echo "Failed to download the CentOS Stream Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi

    elif [ "$1" = "void" ]; then
        echo "[1] void linux 20210218"
        echo "[2] void linux 20210316"
        echo "[3] void linux 20210930"
        echo "[4] void linux 20221001"
        echo "[5] void linux 20230628"
        echo "[6] void linux current"
        while true; do
            printf "Enter a number : "
            read number
            case "$number" in
                1) rootfs="20210218";break;;
                2) rootfs="20210316"; break;;
                3) rootfs="20210930"; break;;
                4) rootfs="20221001";break;;
                5) rootfs="20230628"; break;;
                6) rootfs="current"; break;;
                *) echo "Unknown option : $number";;
            esac
        done
        if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
            if [ "$rootfs" = "current" ]; then
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://repo-default.voidlinux.org/live/$rootfs/void-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/armv7l/g)-ROOTFS-20230628.tar.xz"
            else
                wget -O "$chroot_distro_path/.rootfs/$1.tar.xz" "https://repo-default.voidlinux.org/live/$rootfs/void-$(echo $hardware_machine | sed s/arm64/aarch64/g | sed s/amd64/x86_64/g | sed s/i386/i686/g | sed s/armhf/armv7l/g)-ROOTFS-$rootfs.tar.xz"
            fi
            if [ $? -ne 0 ]; then
                echo "Failed to download the Void Linux Rootfs."
                rm $chroot_distro_path/.rootfs/$1.tar.xz
                exit
            fi
        else
            echo "Already downloaded."
        fi
    else
        echo "Unavailable distro: $1"
    fi
}

chroot_distro_check_if_supported() {
    echo "$1" | tr ' ' '\n' | while read -r distro; do
        if [ $distro = $2 ]; then
            return 1
        fi
    done
    return 0
}

chroot_distro_delete() {
    supported="alpine archlinux artix debian deepin fedora manjaro openkylin opensuse pardus ubuntu void kali parrot backbox centos centos_stream"
    if ! chroot_distro_check_if_supported $supported $1; then
        echo "unavailable distro $1"
        exit 1
    fi

    if [ -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
        rm $chroot_distro_path/.rootfs/$1.tar.xz
    else
        echo "$1 not downloaded"
        exit 1
    fi
}

chroot_distro_mount_system_point() {
    path_to_mount=$1
    mount_point=$2
    if [ ! -d $mount_point ]; then
        if ! mkdir -p $mount_point; then
            echo "creating mount point $mount_point failed"
            exit 1
        fi
    fi
    if ! mount --bind $path_to_mount $mount_point; then
        echo "could not mount $path_to_mount to $mount_point"
        exit 1
    fi
}

chroot_distro_mount_system_points() {
    distro_path=$1
    chroot_distro_mount_system_point /dev $distro_path/dev
    chroot_distro_mount_system_point /sys $distro_path/sys
    chroot_distro_mount_system_point /proc $distro_path/proc
    chroot_distro_mount_system_point /dev/pts $distro_path/dev/pts
    chroot_distro_mount_system_point /sdcard $distro_path/sdcard
    chroot_distro_mount_system_point /system $distro_path/system
    chroot_distro_mount_system_point /data $distro_path/data
    for file in "/storage"/*; do
        chroot_distro_mount_system_point /$file $distro_path/$file
    done
}

chroot_distro_unmount_system_point() {
    mount_point=$1
    if ! mountpoint -q $mount_point; then
        # nothing to do, already unmounted
        return
    fi
    if ! umount -lf $mount_point; then
        echo "could not unmount $mount_point, uninstall may need manual intervention, proceed with care"
        exit 1
    fi
}

chroot_distro_unmount_system_points() {
    distro_path=$1
    for file in "/storage"/*; do
        chroot_distro_unmount_system_point $distro_path/$file
    done
    chroot_distro_unmount_system_point $distro_path/data
    chroot_distro_unmount_system_point $distro_path/system
    chroot_distro_unmount_system_point $distro_path/sdcard
    if [ -f $distro_path/dev/pts ]; then
        chroot_distro_unmount_system_point $distro_path/dev/pts
    fi
    chroot_distro_unmount_system_point $distro_path/proc
    chroot_distro_unmount_system_point $distro_path/sys
    chroot_distro_unmount_system_point $distro_path/dev
}

chroot_distro_install() {
    supported="alpine archlinux artix debian deepin fedora manjaro openkylin opensuse pardus ubuntu void kali parrot backbox centos centos_stream"
    if ! chroot_distro_check_if_supported $supported $1; then
        echo "unavailable distro $1"
        exit 1
    fi

    if [ ! -f "$chroot_distro_path/.rootfs/$1.tar.xz" ]; then
        echo "$1 not downloaded"
        exit 1
    fi

    if [ -d "$chroot_distro_path/$1" ]; then
        echo "$1 already installed"
        exit 1
    fi

    distro_path=$chroot_distro_path/$1
    rootdir="."
    if [ $(tar -tf $chroot_distro_path/.rootfs/"$1".tar.xz 2>/dev/null | grep -E -c '^[^/]*/$') -eq 1 ]; then
        $rootdir="$( basename "$( tar -tf "$chroot_distro_path/.rootfs/$1.tar.xz" 2>/dev/null | head -n 1)" )"
    fi
    if [ $rootdir = "." ]; then
        mkdir $distro_path
        tar -xf "$chroot_distro_path/.rootfs/$1.tar.xz" -C "$distro_path/"
    else
        tar -xf "$chroot_distro_path/.rootfs/$1.tar.xz" -C "$chroot_distro_path/"
        mv "$chroot_distro_path/$rootdir" "$distro_path"
    fi

    chroot_distro_mount_system_points $distro_path

    echo "nameserver 8.8.8.8" > $distro_path/etc/resolv.conf
    echo "127.0.0.1 localhost" > $distro_path/etc/hosts
    chroot $distro_path /sbin/groupadd -g 3003 aid_inet 2>/dev/null
    chroot $distro_path /sbin/groupadd -g 3004 aid_net_raw 2>/dev/null
    chroot $distro_path /sbin/groupadd -g 1003 aid_graphics 2>/dev/null
    chroot $distro_path /sbin/usermod -g 3003 -G 3003,3004 -a _apt 2>/dev/null
    chroot $distro_path /sbin/usermod -G 3003 -a root 2>/dev/null
    chroot $distro_path /bin/ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime 2>/dev/null
    chroot $distro_path /sbin/locale-gen en_US.UTF-8 2>/dev/null
    chroot $distro_path /bin/su - root
}

chroot_distro_uninstall() {
    supported="alpine archlinux artix debian deepin fedora manjaro openkylin opensuse pardus ubuntu void kali parrot backbox centos centos_stream"
    if ! chroot_distro_check_if_supported $supported $1; then
        echo "unavailable distro $1"
        exit 1
    fi

    distro_path=$chroot_distro_path/$1
    if [ -d "$distro_path" ]; then
        chroot_distro_unmount_system_points $distro_path
        rm -rf $distro_path
    else
        echo "$1 not installed"
        exit 1
    fi
}

chroot_distro_backup() {
    supported="alpine archlinux artix debian deepin fedora manjaro openkylin opensuse pardus ubuntu void kali parrot backbox centos centos_stream"
    if ! chroot_distro_check_if_supported $supported $1; then
        echo "unavailable distro $1"
        exit 1
    fi

    if [ "$2" = "" ]; then
        if [ -f "$chroot_distro_path/.backup/$1.tar.xz" ]; then
            tar -cvf $chroot_distro_path/.backup/$1.tar.xz $chroot_distro_path/$1
        else
            echo "backup already exist, unbackup and try agin"
            exit 1
        fi
    else
        tar -cvf $2 $chroot_distro_path/$1
    fi
}

chroot_distro_unbackup() {
    supported="alpine archlinux artix debian deepin fedora manjaro openkylin opensuse pardus ubuntu void kali parrot backbox centos centos_stream"
    if ! chroot_distro_check_if_supported $supported $1; then
        echo "unavailable distro $1"
        exit 1
    fi

    if [ -f "$chroot_distro_path/.backup/$1.tar.xz" ]; then
        rm $chroot_distro_path/.backup/$1.tar.xz
    else
        echo "backup not found $1"
        exit 1
    fi
}

chroot_distro_restore() {
    supported="alpine archlinux artix debian deepin fedora manjaro openkylin opensuse pardus ubuntu void kali parrot backbox centos centos_stream"
    if ! chroot_distro_check_if_supported $supported $1; then
        echo "unavailable distro $1"
        exit 1
    fi

    if [ -d "$chroot_distro_path/$1" ]; then
        echo "distro already installed , uninstall and try again"
        exit 1
    fi

    if [ "$2" = "" ]; then
        if [ ! -f "$chroot_distro_path/.backup/$1.tar.xz" ]; then
            echo "backup not found"
            exit 1
        fi

        distro_path=$chroot_distro_path/$1
        mkdir $distro_path
        if [ $(tar -tf $chroot_distro_path/.backup/"$1".tar.xz 2>/dev/null | grep -E '^.*\/$' | wc -l) -gt 2 ]; then
            tar -xf "$chroot_distro_path/.backup/$1.tar.xz" -C "$chroot_distro_path/$1/"
        else
            tar -xf "$chroot_distro_path/.backup/$1.tar.xz" -C "$chroot_distro_path/"
            mv "$chroot_distro_path/$( basename "$( tar -tf "$chroot_distro_path/.backup/$1.tar.xz" 2>/dev/null | head -n 1)")" "$chroot_distro_path/$1"
        fi

        chroot_distro_mount_system_points $distro_path

        echo "nameserver 8.8.8.8" > $distro_path/etc/resolv.conf
        echo "127.0.0.1 localhost" > $distro_path/etc/hosts
        chroot $distro_path /sbin/groupadd -g 3003 aid_inet 2>/dev/null
        chroot $distro_path /sbin/groupadd -g 3004 aid_net_raw 2>/dev/null
        chroot $distro_path /sbin/groupadd -g 1003 aid_graphics 2>/dev/null
        chroot $distro_path /sbin/usermod -g 3003 -G 3003,3004 -a _apt 2>/dev/null
        chroot $distro_path /sbin/usermod -G 3003 -a root 2>/dev/null
        chroot $distro_path /bin/ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime 2>/dev/null
        chroot $distro_path /sbin/locale-gen en_US.UTF-8 2>/dev/null
        chroot $distro_path /bin/su - root
    elif [ -f "$2" ]; then
        distro_path=$chroot_distro_path/$1
        mkdir $distro_path
        if [ $(tar -tf $chroot_distro_path/.backup/"$1".tar.xz 2>/dev/null | grep -E '^.*\/$' | wc -l) -gt 2 ]; then
            tar -xf "$chroot_distro_path/.backup/$1.tar.xz" -C "$chroot_distro_path/$1/"
        else
            tar -xf "$chroot_distro_path/.backup/$1.tar.xz" -C "$chroot_distro_path/"
            mv "$chroot_distro_path/$( basename "$( tar -tf "$chroot_distro_path/.backup/$1.tar.xz" 2>/dev/null | head -n 1)")" "$chroot_distro_path/$1"
        fi

        chroot_distro_mount_system_points $distro_path

        echo "nameserver 8.8.8.8" > $distro_path/etc/resolv.conf
        echo "127.0.0.1 localhost" > $distro_path/etc/hosts
        chroot $distro_path /sbin/groupadd -g 3003 aid_inet 2>/dev/null
        chroot $distro_path /sbin/groupadd -g 3004 aid_net_raw 2>/dev/null
        chroot $distro_path /sbin/groupadd -g 1003 aid_graphics 2>/dev/null
        chroot $distro_path /sbin/usermod -g 3003 -G 3003,3004 -a _apt 2>/dev/null
        chroot $distro_path /sbin/usermod -G 3003 -a root 2>/dev/null
        chroot $distro_path /bin/ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime 2>/dev/null
        chroot $distro_path /sbin/locale-gen en_US.UTF-8 2>/dev/null
        chroot $distro_path /bin/su - root
    else
        echo "backup not found"
        exit 1
    fi
}

chroot_distro_command() {
    supported="alpine archlinux artix debian deepin fedora manjaro openkylin opensuse pardus ubuntu void kali parrot backbox centos centos_stream"
    if ! chroot_distro_check_if_supported $supported $1; then
        echo "unavailable distro $1"
        exit 1
    fi

    if [ ! -d "$chroot_distro_path/$1" ]; then
        echo "$1 not installed"
        exit 1
    fi

    distro_path=$chroot_distro_path/$1
    chroot_distro_mount_system_points $distro_path

    chroot $distro_path /bin/$2
}

chroot_distro_login() {
    supported="alpine archlinux artix debian deepin fedora manjaro openkylin opensuse pardus ubuntu void kali parrot backbox centos centos_stream"
    if ! chroot_distro_check_if_supported $supported $1; then
        echo "unavailable distro $1"
        exit 1
    fi

    if [ ! -d "$chroot_distro_path/$1" ]; then
        echo "$1 not installed"
        exit 1
    fi

    distro_path=$chroot_distro_path/$1
    chroot_distro_mount_system_points $distro_path

    chroot $chroot_distro_path/$1/ /bin/su - root
}

if [ "$1" = "help" ]; then
    chroot_distro_help
elif [ "$1" = "list" ]; then
    chroot_distro_list
elif [ "$1" = "download" ]; then
    chroot_distro_download $2
elif [ "$1" = "redownload" ]; then
    chroot_distro_delete $2
    chroot_distro_download $2
elif [ "$1" = "delete" ]; then
    chroot_distro_delete $2
elif [ "$1" = "install" ]; then
    chroot_distro_install $2
elif [ "$1" = "uninstall" ]; then
    chroot_distro_uninstall $2
elif [ "$1" = "reinstall" ]; then
    chroot_distro_uninstall $2
    chroot_distro_install $2
elif [ "$1" = "backup" ]; then
    chroot_distro_backup $2 $3
elif [ "$1" = "unbackup" ]; then
    chroot_distro_unbackup $2
elif [ "$1" = "restore" ]; then
    chroot_distro_restore $2 $3
elif [ "$1" = "command" ]; then
    chroot_distro_command $2 $3
elif [ "$1" = "login" ]; then
    chroot_distro_login $2
elif [ "$1" != "" ]; then
    echo "chroot-distro invalid option $1"
    echo "try 'chroot-distro help' for more information"
else
    chroot_distro_help
fi
